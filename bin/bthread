#!/usr/bin/env node
var bthread = require('../');
var utils = require('./utils');

var bn = require('bn.js');
var dns = require('dns');
var net = require('net');
var path = require('path');
var os = require('os');
var spawn = require('child_process').spawn;
var fs = require('fs');

var progress = require('progress');
var prompt = require('prompt');
var leveldown = require('leveldown');

var argv = require('yargs')
    .demand([ 'host' ])
    .alias('h', 'host')
    .alias('p', 'passphrase')
    .alias('c', 'post-cost')
    .alias('r', 'reply-to')
    .argv;

var addrs = [
  'seed.bitcoin.sipa.be',
  'dnsseed.bluematt.me',
  'dnsseed.bitcoin.dashjr.org',
  'seed.bitcoinstats.com',
  'seed.bitnodes.io',
  'bitseed.xf2.org'
];

var logger = utils.logger();

logger.info('Welcome to BThread');
logger.info('You are going to start participating on: %s', argv.host);
if (argv.passphrase)
  return onPassphrase(null, { passphrase: argv.passphrase });

logger.info('Please supply your passphrase so we will be able to identify you');
prompt.start();
prompt.get({
  properties: {
    passphrase: {
      required: true,
      hidden: true
    }
  }
}, function(err, result) {
  onPassphrase(err, result);
});

var thread;

function onPassphrase(err, result) {
  if (err) {
    logger.err('Cancelled');
    return exit();
  }

  var pass = result.passphrase;
  if (pass.length < 20)
    logger.err('Please use passphrase with length > 20 symbols');

  thread = new bthread({
    db: leveldown,
    dbPath: path.resolve(__dirname, '..', 'db'),
    host: argv.host,
    passphrase: pass,
    postCost: argv.postCost,

    resolveTxt: dns.resolveTxt,

    createConnection: function() {
      return net.connect(8333, addrs[(Math.random() * addrs.length) | 0]);
    }
  });

  thread.once('dns-record', function(r) {
    logger.info('===================================================');
    logger.info('Set this as TXT record for %s:', argv.host);
    logger.info('    ' + r);
    logger.info('===================================================');
  });

  var searchBar = null;
  var searchLast = 0;
  thread.on('search', function(range, a, b) {
    if (!searchBar || searchBar.total !== b) {
      var start = new Date(range.start * 1000).toDateString();
      var end = new Date(range.end * 1000).toDateString();
      logger.pause();
      searchBar = new progress('  \x1b[34;msearching ' + start + ' -> ' + end +
                               ' [:bar] :etas\x1b[0;m', {
        total: b,
        width: 20
      });
      searchLast = 0;
    }
    searchBar.tick(a - searchLast);
    if (a === b)
      logger.unpause();
    searchLast = a;
  });

  thread.on('log', function() {
    logger.info.apply(logger, arguments);
  });

  thread.on('balance', function() {
    logger.info('Wallet balance updated: %s', thread.balance.toString(10));
  });

  thread.on('wallet', function(addr, kind) {
    if (kind === 'self') {
      logger.info('Your wallet is %s', addr);
    } else {
      if (thread.isOwner)
        logger.info('You are the thread\'s owner');
      else
        logger.info('Thread owner\'s wallet is %s', addr);
    }
  });

  var waiting = 2;
  thread.once('search-end', next);
  thread.once('full', next);
  function next() {
    if (--waiting === 0)
      start();
  }
}

function start() {
  if (argv._[0] === 'post')
    return post(exit);
  else if (argv._[0] === 'list')
    return list(exit);
  else if (argv._[0] === 'show')
    return show(argv._[1], exit);
  else if (argv._[0] === 'key')
    return key(exit);
}

function exit() {
  if (thread)
    thread.close();
}

function post(cb) {
  var tmpFile = path.resolve(os.tmpDir(), (+new Date) + Math.random() + '.bt');
  var ed = process.env.EDITOR || 'vim';
  if (!process.env.EDITOR)
    logger.err('No EDITOR env variable found, spawning %s', ed);

  var line = 'Please write your BThread message here\n';
  fs.writeFileSync(tmpFile, 'Please write your BThread message here\n');
  logger.pause();
  ed = spawn(ed, [ tmpFile ], {
    stdio: [ 0, 1, 2 ]
  });

  var postMsg = null;
  ed.once('close', function() {
    logger.unpause();
    var msg = fs.readFileSync(tmpFile).toString();
    try {
      fs.unlinkSync(tmpFile);
    } catch(e) {
    }

    // Skip predefined string
    if (msg.slice(0, line.length) === line)
      msg = msg.slice(line.length);

    if (msg.length === 0) {
      logger.err('Error: message file is empty');
      return exit();
    }

    postMsg = {
      content: msg,
      replyTo: argv['reply-to']
    };

    // Owner, no point in sending additional money to self
    if (thread.isOwner)
      return thread.post(new bn(0), postMsg, confirm, onPost);

    prompt.get({
      properties: {
        cost: {
          description: 'Please enter amount of additional Satoshi to send to ' +
                       'the author',
          pattern: /^\d+$/gi,
          required: true
        }
      }
    }, function(err, result) {
      if (err) {
        logger.err('Cancelled');
        return exit();
      }

      thread.post(new bn(result.cost, 10), postMsg, confirm, onPost);
    });
  });

  function confirm(out, fee, cb) {
    logger.info('The TX value is be %s satoshi, and fee is %s satoshi',
                out.toString(10),
                fee.toString(10));
    prompt.get({
      properties: {
        confirm: {
          description: 'Please confirm your actions by entering `yes`',
          pattern: /^(yes|no|y|n)$/gi,
          required: true
        }
      }
    }, function(err, result) {
      if (err) {
        logger.err('Cancelled');
        return exit();
      }

      cb(/y/i.test(result.confirm));
    });
  }

  function onPost(err, status, tx) {
    if (err && err.minBalance)
      return retry(err.minBalance);
    if (err)
      throw err;
    logger.out('Messages %s posted, the TX hash is %s',
               status ? 'successfully' : 'not',
               tx.hash('hex'));

    // Ensure that enough acks will be acquired
    setTimeout(cb, 5000);
  }

  function retry(balance) {
    logger.info('');
    logger.info('You don\'t have enough bitcoins to post a message');
    logger.info('Minimum required value is %s satoshi (~%d BTC)',
                balance.toString(10),
                balance.toString(10) / 10000000);

    var req = balance.sub(thread.balance);
    logger.info('Please send %d satoshi (~%d BTC) to your address: ' +
                   '%s to continue',
                req.toString(10),
                req.toString(10) / 10000000,
                thread.wallet.self.getAddress());

    // Retry later
    thread.once('balance', function() {
      if (this.balance.cmp(balance) >= 0)
        this.post(postMsg, onPost);
    });
  }
}

function list(cb) {
  function print(post, prefix) {
    if (post.author !== 'owner') {
      logger.out(prefix + '* %s %s by <%s>',
                 post.hash,
                 JSON.stringify(post.title),
                 post.author);
    } else {
      logger.out(prefix + '* %s %s', post.hash, JSON.stringify(post.title));
    }
    post.replies.forEach(function(reply) {
      print(reply, prefix + '  ');
    });
  }
  thread.list().forEach(function(post) {
    print(post, '');
  });
  cb();
}

function show(hash, cb) {
  if (!hash) {
    logger.err('Hash argument is required: %s [opts] show <hash>',
               process.argv[1]);
    return cb();
  }

  var found = thread.list().some(function(post) {
    if (post.hash !== hash)
      return false;

    logger.out(post.content);

    return true;
  });

  if (!found)
    logger.err('Post with hash %s not found', hash);

  cb();
}

function key(cb) {
  logger.out('Your private key is %s',
             thread.wallet.self.getPrivateKey('base58'));
  cb();
}
