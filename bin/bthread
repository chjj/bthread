#!/usr/bin/env node
var bthread = require('../');
var bcoin = require('bcoin');
var utils = require('./utils');

var bn = require('bn.js');
var dns = require('dns');
var net = require('net');
var path = require('path');
var os = require('os');
var spawn = require('child_process').spawn;
var fs = require('fs');

var progress = require('progress');
var prompt = require('prompt');
var leveldown = require('leveldown');

var yargs = require('yargs')
    .usage('Usage: \n' +
           ' * List messages: $0 host.name list\n' +
           ' * Show message: $0 host.name show <hash-or-first-bytes-of-it>\n' +
           ' * Post message: $0 host.name post\n' +
           ' * Post reply: $0 host.name post --reply-to=<full-hash>\n' +
           ' * Get private key: $0 host.name key')
    .alias('p', 'passphrase')
    .describe('p', 'Passphrase to use when posting on this thread')
    .alias('r', 'reply-to')
    .describe('r', 'Hash of the post you want to reply to')
var argv = yargs.argv;

var logger = utils.logger();

if (argv._.length < 2) {
  yargs.showHelp();
  logger.err('Not enough arguments');
  process.exit(1);
  return;
}

var host = argv._[0];

var addrs = [
  'seed.bitcoin.sipa.be',
  'dnsseed.bluematt.me',
  'dnsseed.bitcoin.dashjr.org',
  'seed.bitcoinstats.com',
  'seed.bitnodes.io',
  'bitseed.xf2.org'
];

var thread;
var wallet;

// Display nice progress bar
var search = {
  bar: null,
  last: null,
  total: null
};

logger.info('Welcome to BThread');
logger.info('You are going to start participating on: %s', host);
if (argv.passphrase)
  return onPassphrase(null, { passphrase: argv.passphrase });

logger.info('Please supply your passphrase so we will be able to identify you');
prompt.start();
prompt.get({
  properties: {
    passphrase: {
      required: true,
      hidden: true
    }
  }
}, function(err, result) {
  onPassphrase(err, result);
});
function onSearch(kind, a, b) {
  if (search.bar && search.total !== b)
    return;

  if (!search.bar) {
    logger.pause();
    search.bar = new progress('  \x1b[34;msearching ' + kind + ' txs ' +
                              '[:bar] :etas\x1b[0;m', {
      total: b,
      width: 20
    });
    search.total = b;
    search.last = 0;
  }
  search.bar.tick(a - search.last);
  if (a === b) {
    logger.unpause();
    search.bar = null;
    search.total = -1;
  } else {
    search.last = a;
  }
}

function onPassphrase(err, result) {
  if (err) {
    logger.err('Cancelled');
    return exit();
  }

  var pass = result.passphrase;
  if (pass.length < 32)
    logger.err('Please use passphrase with length > 32 symbols');

  thread = new bthread({
    dbEngine: leveldown,
    dbPath: path.resolve(__dirname, '..', 'db'),
    host: host,
    postCost: argv.postCost,

    resolveTxt: dns.resolveTxt,

    createConnection: function() {
      return net.connect(8333, addrs[(Math.random() * addrs.length) | 0]);
    }
  });

  // Self wallet
  wallet = new bcoin.wallet({
    scope: host,
    passphrase: pass,
    storage: thread.db
  });
  thread.pool.addWallet(wallet)
             .on('progress', function(t, c) {
               onSearch('self', t, c);
             })
             .once('end', next);
  logger.info('Your wallet is %s', wallet.getAddress());

  thread.once('create-dns', function(cb) {
    cb(pass, function(r) {
      logger.info('===================================================');
      logger.info('Set this as TXT record for %s:', host);
      logger.info('    ' + r);
      logger.info('===================================================');
    });
  });

  thread.on('search', function(t, c) {
    onSearch('owner', t, c);
  });

  thread.on('log', function() {
    logger.info.apply(logger, arguments);
  });

  wallet.on('balance', function(b) {
    logger.info('Wallet balance updated: %s', b.toString(10));
  });

  thread.on('tx', function(tx) {
    wallet.addTX(tx);
  });

  thread.on('wallet', function(addr, kind) {
    logger.info('Thread owner\'s wallet is %s', addr);
  });

  thread.once('load', next);

  var waiting = 2;
  function next() {
    if (--waiting === 0)
      start();
  }
}

function start() {
  var cmd = argv._[1];
  if (cmd === 'post')
    return post(exit);
  else if (cmd === 'list')
    return list(exit);
  else if (cmd === 'show')
    return show(argv._[2], exit);
  else if (cmd === 'key')
    return key(exit);

  yargs.showHelp();
  logger.err('Unknown command %s', cmd);
  exit();
}

function exit() {
  if (thread)
    thread.close();
}

function post(cb) {
  var tmpFile = path.resolve(os.tmpDir(), (+new Date) + Math.random() + '.bt');
  var ed = process.env.EDITOR || 'vim';
  if (!process.env.EDITOR)
    logger.err('No EDITOR env variable found, spawning %s', ed);

  var line = 'Please write your BThread message here\n';
  fs.writeFileSync(tmpFile, 'Please write your BThread message here\n');
  logger.pause();
  ed = spawn(ed, [ tmpFile ], {
    stdio: [ 0, 1, 2 ]
  });

  var postMsg = null;
  var postCost = null;
  ed.once('close', function() {
    logger.unpause();
    var msg = fs.readFileSync(tmpFile).toString();
    try {
      fs.unlinkSync(tmpFile);
    } catch(e) {
    }

    // Skip predefined string
    if (msg.slice(0, line.length) === line)
      msg = msg.slice(line.length);

    if (msg.length === 0) {
      logger.err('Error: message file is empty');
      return exit();
    }

    postMsg = {
      content: msg,
      replyTo: argv['reply-to']
    };

    // Owner, no point in sending additional money to self
    if (thread.isOwner(wallet)) {
      postCost = new bn(0);
      return thread.post(wallet, postCost, postMsg, confirm, onPost);
    }

    prompt.get({
      properties: {
        cost: {
          description: 'Please enter amount of additional Satoshi to send to ' +
                       'the author',
          pattern: /^\d+$/gi,
          required: true
        }
      }
    }, function(err, result) {
      if (err) {
        logger.err('Cancelled');
        return exit();
      }

      postCost = new bn(result.cost, 10);
      thread.post(wallet, postCost, postMsg, confirm, onPost);
    });
  });

  function confirm(out, fee, cb) {
    logger.info('The TX value is be %s satoshi, and fee is %s satoshi',
                out.toString(10),
                fee.toString(10));
    prompt.get({
      properties: {
        confirm: {
          description: 'Please confirm your actions by entering `yes`',
          pattern: /^(yes|no|y|n)$/gi,
          required: true
        }
      }
    }, function(err, result) {
      if (err) {
        logger.err('Cancelled');
        return exit();
      }

      cb(/y/i.test(result.confirm));
    });
  }

  function onPost(err, status, hash) {
    if (err && err.minBalance)
      return retry(err.minBalance);
    if (err)
      throw err;
    logger.out('Messages %s posted, the TX hash is %s',
               status ? 'successfully' : 'not',
               hash);

    // Ensure that enough acks will be acquired
    setTimeout(cb, 5000);
  }

  function retry(balance) {
    logger.info('');
    logger.info('You don\'t have enough bitcoins to post a message');
    logger.info('Minimum required value is %s BTC',
                bcoin.utils.toBTC(balance));

    var req = balance.sub(thread.balance);
    logger.info('Please send %s BTC to your address: ' +
                   '%s to continue',
                bcoin.utils.toBTC(req),
                thread.wallet.getAddress());

    // Retry later
    wallet.on('balance', function(b) {
      thread.post(wallet, postCost, postMsg, confirm, onPost);
    });
  }
}

function list(cb) {
  function print(post, prefix) {
    var title = JSON.stringify(post.title || 'Untitled');
    if (post.author !== 'owner') {
      logger.out(prefix + '* %s %s by <%s>',
                 post.hash,
                 title,
                 post.author || 'unknown');
    } else {
      logger.out(prefix + '* %s %s', post.hash, title);
    }
    post.replies.forEach(function(reply) {
      print(reply, prefix + '  ');
    });
  }
  thread.list().forEach(function(post) {
    print(post, '');
  });
  cb();
}

function show(hash, cb) {
  if (!hash) {
    yargs.showHelp();
    logger.err('Hash argument is required: %s [opts] show <hash>',
               process.argv[0]);
    return cb();
  }

  var post = thread.list(hash);
  if (!post)
    logger.err('Post with hash %s not found', hash);
  else
    logger.out(post.content);

  cb();
}

function key(cb) {
  logger.out('Your private key is %s',
             thread.wallet.getPrivateKey('base58'));
  cb();
}
